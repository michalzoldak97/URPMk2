//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MyAssets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace URPMk2
{
    public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Controllable"",
            ""id"": ""9c605f07-25ba-4c78-b59d-e42bbdd95e6c"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fbc27592-1700-448b-8037-f147bc7d0214"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""207da09e-bb0e-4bb4-ba98-fe5cf5e8decc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a15c0794-6f52-42fa-8168-98676fe64e27"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WSAD"",
                    ""id"": ""8fbca4b4-3645-49da-91c7-29b4217e4af1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eff0a16e-a30e-4962-83db-e868ad5c5def"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""87b39951-afe4-4461-b3fc-9465a98001b3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""47cb8564-7f25-463e-be47-287865b11cef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0cbbe058-ba5f-45fd-9ea9-4106b8799ecb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Humanoid"",
            ""id"": ""5608d37f-2245-4511-8c93-89daf35c07e2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1d131a1a-488a-4151-8110-84b9a28751db"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7e64ed83-52ef-4d0d-b87e-c7c4af527883"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""e43f5b59-88b0-4d6b-ab0d-c50f09ab5c5f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""85681ee5-de16-474e-8f77-e4a9db240cc5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""da63512f-6ff4-4ef5-8a04-e77fba0a316c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ed30353b-ce44-4aca-810b-d4ebacd1c17b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b4b90aa9-64ac-417d-b6da-9a0bf07b6a82"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""48c18255-8ac4-42b1-a38d-8c7378d827fd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0c4493dc-e33e-46ed-8252-056512667bbd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a996dd39-c49c-4162-bf11-e0f442619f27"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2c7ff52f-c2e5-4ca0-b8dc-5d1a62dc769f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9d47fc54-c1de-4a7b-855e-39d60e3ef0b7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""182980dc-caba-4ccb-b3d5-7ff1e90f525a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Controllable
            m_Controllable = asset.FindActionMap("Controllable", throwIfNotFound: true);
            m_Controllable_Jump = m_Controllable.FindAction("Jump", throwIfNotFound: true);
            m_Controllable_Move = m_Controllable.FindAction("Move", throwIfNotFound: true);
            // Humanoid
            m_Humanoid = asset.FindActionMap("Humanoid", throwIfNotFound: true);
            m_Humanoid_Move = m_Humanoid.FindAction("Move", throwIfNotFound: true);
            m_Humanoid_Jump = m_Humanoid.FindAction("Jump", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Controllable
        private readonly InputActionMap m_Controllable;
        private IControllableActions m_ControllableActionsCallbackInterface;
        private readonly InputAction m_Controllable_Jump;
        private readonly InputAction m_Controllable_Move;
        public struct ControllableActions
        {
            private @PlayerInputActions m_Wrapper;
            public ControllableActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Jump => m_Wrapper.m_Controllable_Jump;
            public InputAction @Move => m_Wrapper.m_Controllable_Move;
            public InputActionMap Get() { return m_Wrapper.m_Controllable; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ControllableActions set) { return set.Get(); }
            public void SetCallbacks(IControllableActions instance)
            {
                if (m_Wrapper.m_ControllableActionsCallbackInterface != null)
                {
                    @Jump.started -= m_Wrapper.m_ControllableActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_ControllableActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_ControllableActionsCallbackInterface.OnJump;
                    @Move.started -= m_Wrapper.m_ControllableActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_ControllableActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_ControllableActionsCallbackInterface.OnMove;
                }
                m_Wrapper.m_ControllableActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                }
            }
        }
        public ControllableActions @Controllable => new ControllableActions(this);

        // Humanoid
        private readonly InputActionMap m_Humanoid;
        private IHumanoidActions m_HumanoidActionsCallbackInterface;
        private readonly InputAction m_Humanoid_Move;
        private readonly InputAction m_Humanoid_Jump;
        public struct HumanoidActions
        {
            private @PlayerInputActions m_Wrapper;
            public HumanoidActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Humanoid_Move;
            public InputAction @Jump => m_Wrapper.m_Humanoid_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Humanoid; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HumanoidActions set) { return set.Get(); }
            public void SetCallbacks(IHumanoidActions instance)
            {
                if (m_Wrapper.m_HumanoidActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                    @Jump.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                }
                m_Wrapper.m_HumanoidActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                }
            }
        }
        public HumanoidActions @Humanoid => new HumanoidActions(this);
        public interface IControllableActions
        {
            void OnJump(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
        }
        public interface IHumanoidActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
    }
}
